/* automatically generated by rust-bindgen */

#![allow(non_camel_case_types)]

pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;

#[repr(C)]
#[derive(Debug, Copy)]
pub struct bpf_insn {
    pub code: __u8,
    pub _bitfield_1: u8,
    pub off: __s16,
    pub imm: __s32,
}
#[test]
fn bindgen_test_layout_bpf_insn() {
    assert_eq!(::std::mem::size_of::<bpf_insn>() , 8usize , concat ! (
               "Size of: " , stringify ! ( bpf_insn ) ));
    assert_eq! (::std::mem::align_of::<bpf_insn>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( bpf_insn ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bpf_insn ) ) . code as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( bpf_insn ) , "::" ,
                stringify ! ( code ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bpf_insn ) ) . off as * const _ as usize
                } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( bpf_insn ) , "::" ,
                stringify ! ( off ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bpf_insn ) ) . imm as * const _ as usize
                } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( bpf_insn ) , "::" ,
                stringify ! ( imm ) ));
}
impl Clone for bpf_insn {
    fn clone(&self) -> Self { *self }
}
impl bpf_insn {
    #[inline]
    pub fn dst_reg(&self) -> __u8 {
        let mask = 15usize as u8;
        let field_val: u8 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u8) }
    }
    #[inline]
    pub fn set_dst_reg(&mut self, val: __u8) {
        let mask = 15usize as u8;
        let val = val as u8 as u8;
        let mut field_val: u8 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 0usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
    #[inline]
    pub fn src_reg(&self) -> __u8 {
        let mask = 240usize as u8;
        let field_val: u8 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 4usize;
        unsafe { ::std::mem::transmute(val as u8) }
    }
    #[inline]
    pub fn set_src_reg(&mut self, val: __u8) {
        let mask = 240usize as u8;
        let val = val as u8 as u8;
        let mut field_val: u8 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 4usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    __MAX_BPF_ATTACH_TYPE = 3,
}

extern "C" {
    pub fn bpf_create_map(map_type: bpf_map_type,
                          key_size: ::std::os::raw::c_int,
                          value_size: ::std::os::raw::c_int,
                          max_entries: ::std::os::raw::c_int,
                          map_flags: __u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_create_map_in_map(map_type: bpf_map_type,
                                 key_size: ::std::os::raw::c_int,
                                 inner_map_fd: ::std::os::raw::c_int,
                                 max_entries: ::std::os::raw::c_int,
                                 map_flags: __u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_load_program(type_: bpf_prog_type, insns: *const bpf_insn,
                            insns_cnt: usize,
                            license: *const ::std::os::raw::c_char,
                            kern_version: __u32,
                            log_buf: *mut ::std::os::raw::c_char,
                            log_buf_sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map_update_elem(fd: ::std::os::raw::c_int,
                               key: *const ::std::os::raw::c_void,
                               value: *const ::std::os::raw::c_void,
                               flags: __u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map_lookup_elem(fd: ::std::os::raw::c_int,
                               key: *const ::std::os::raw::c_void,
                               value: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map_delete_elem(fd: ::std::os::raw::c_int,
                               key: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map_get_next_key(fd: ::std::os::raw::c_int,
                                key: *const ::std::os::raw::c_void,
                                next_key: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_obj_pin(fd: ::std::os::raw::c_int,
                       pathname: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_obj_get(pathname: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_prog_attach(prog_fd: ::std::os::raw::c_int,
                           attachable_fd: ::std::os::raw::c_int,
                           type_: bpf_attach_type,
                           flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_prog_detach(attachable_fd: ::std::os::raw::c_int,
                           type_: bpf_attach_type) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_prog_test_run(prog_fd: ::std::os::raw::c_int,
                             repeat: ::std::os::raw::c_int,
                             data: *mut ::std::os::raw::c_void, size: __u32,
                             data_out: *mut ::std::os::raw::c_void,
                             size_out: *mut __u32, retval: *mut __u32,
                             duration: *mut __u32) -> ::std::os::raw::c_int;
}
